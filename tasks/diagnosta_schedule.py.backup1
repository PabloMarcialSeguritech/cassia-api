import pandas as pd
from models.cassia_lpr_events import CassiaLprEvent as CassiaEventModel
from models.cassia_config import CassiaConfig
from models.cassia_arch_traffic_events import CassiaArchTrafficEvent
from models.cassia_arch_traffic_events_2 import CassiaArchTrafficEvent2
from rocketry import Grouper
from utils.settings import Settings
from utils.db import DB_Zabbix, DB_Syslog
from sqlalchemy import text
import numpy as np
from datetime import datetime, timedelta
import pytz
import time
import httpx
# Creating the Rocketry app
diagnosta_schedule = Grouper()

# Creating some tasks
SETTINGS = Settings()
diagnosta = SETTINGS.cassia_diagnosta
diagnosta_api_url = SETTINGS.cassia_diagnosta_api_url
traffic_syslog = SETTINGS.cassia_traffic_syslog


@diagnosta_schedule.cond('diagnosta')
def is_diagnosta():
    return diagnosta


@diagnosta_schedule.task(("every 60 seconds & diagnosta"), execution="thread")
async def process_problems():
    db_zabbix = DB_Zabbix()
    with db_zabbix.Session() as session:
        statement_zabbix = text(
            f"call sp_viewProblem('0','','','6')")
        problems_zabbix = pd.DataFrame(session.execute(statement_zabbix))
        statement_local = text(
            f"""SELECT * FROM cassia_arch_traffic_events_2 cate 
WHERE cate.closed_at is NULL and 
severity =6""")
        problems_local = pd.DataFrame(session.execute(statement_local))
        """ print(problems.to_string()) """
        """ print(problems) """
        sync_zabbix = text(
            f"""SELECT * FROM cassia_diagnostic_problems_2 where closed_at is null and local=0""")
        sync_zabbix = pd.DataFrame(session.execute(sync_zabbix))
        sync_local = text(
            f"""SELECT * FROM cassia_diagnostic_problems_2 where closed_at is null and local=1""")
        sync_local = pd.DataFrame(session.execute(sync_local))
        if not sync_zabbix.empty:
            """  aqui deberia de ir event_id en la izquierda"""
            no_sync_zabbix = problems_zabbix[~problems_zabbix['eventid'].isin(
                sync_zabbix['eventid'])]
        else:
            no_sync_zabbix = problems_zabbix
        if not sync_local.empty:
            no_sync_local = problems_local[~problems_local['cassia_arch_traffic_events_id'].isin(
                sync_local['eventid'])]
        else:
            if not problems_local.empty:
                no_sync_local = problems_local
            else:
                no_sync_local = pd.DataFrame(
                    columns=['cassia_arch_traffic_events_id',
                             'hostid', 'created_at',
                             'closed_at', 'severity',
                             'message', 'status', 'updated_at', 'latitude', 'longitude', 'municipality', 'ip',
                             'hostname', 'tech_id'])
        if not no_sync_zabbix.empty:
            no_sync_zabbix['synced'] = [0 for i in range(len(no_sync_zabbix))]
        if not no_sync_local.empty:
            no_sync_local['synced'] = [0 for i in range(len(no_sync_local))]
        a_sincronizar = pd.DataFrame(
            columns=['eventid', 'depends_eventid', 'status', 'closed_at', 'local'])
        """ problematicos = pd.DataFrame(columns=['eventid'])
        problematicos_final = pd.DataFrame(columns=['eventid'])
        dependencias = pd.DataFrame(columns=['eventid']) """
        """ no_sync = no_sync[no_sync['hostid'] == 19834]
        print(no_sync) """
        problemas_creados = pd.DataFrame(columns=['eventid', 'hostid'])
        repeticiones = 0
        rep_ind = 0
        sync_rep = 5
        len_arr = len(problems_zabbix)
        sync_indice = 0
        """ print(no_sync) """
        for ind in no_sync_zabbix.index:
            async with httpx.AsyncClient() as client:
                """ print("entra") """
                """ sinced = no_sync[no_sync['synced'] == 1] """
                """ print(f"Sincronizados: {len(sinced)}") """
                if no_sync_zabbix['synced'][ind] == 1:
                    """ print("saltara") """
                    continue
                """ print("prueba") """
                response = await client.get(f"{diagnosta_api_url}/analisis/{no_sync_zabbix['hostid'][ind]}", timeout=120)

                response_json = response.json()
                """ print(type(response)) """
                if len(response_json) > 0:
                    if 'capaGeneral' in response_json:
                        """ procesed = await process_layer(
                            'capaGeneral', response_json, no_sync_zabbix,no_sync_local, a_sincronizar, response_json, problematicos, dependencias) """
                        procesed = await process_layer(
                            'capaGeneral', response_json, no_sync_zabbix, no_sync_local, a_sincronizar, session, problemas_creados)
                        a_sincronizar = procesed
                        """ a_sincronizar = procesed['a_sincronizar']
                        problematicos = procesed['problematicos']
                        dependencias = procesed['dependencias'] """
                    """ if 'capa2' in response:
                            a_sincronizar = await process_layer(
                                'capa2', response, no_sync, a_sincronizar, response_json) """

            repeticiones += 1
            rep_ind += 1
            if rep_ind == sync_rep or repeticiones >= len_arr:
                a_sincronizar = a_sincronizar.drop_duplicates()
                print(a_sincronizar)

                sincronizacion_parcial = a_sincronizar.iloc[sync_indice:(len(
                    a_sincronizar)+1)]
                print(sincronizacion_parcial)
                if repeticiones >= len_arr:
                    """ print("Final")
                    print(repeticiones)
                    print("se sincronizo final") """
                """ problematicos = problematicos.drop_duplicates()
                problematicos = problematicos[~problematicos['eventid'].isin(
                    problematicos_final['eventid'])]
                problematicos_final = pd.concat(
                    [problematicos_final, problematicos], ignore_index=True).replace(np.nan, "")

                a_guardar = pd.DataFrame() """
                """ if not problematicos.empty:
                    if not no_sync.empty:
                        a_guardar = problematicos[~problematicos['eventid'].isin(
                            no_sync['eventid'].to_list())]
                    else:
                        a_guardar = problematicos """

                if not sincronizacion_parcial.empty:

                    """ if not sync.empty:
                        a_guardar = a_guardar[~a_guardar['eventid'].isin(
                            sync['eventid'].to_list())] """
                    sql = sincronizacion_parcial.to_sql('cassia_diagnostic_problems_2', con=db_zabbix.engine,
                                                        if_exists='append', index=False)
                session.commit()
                """ print(rep_ind) """
                print("se sincronizo")
                rep_ind = 0
                sync_indice = len(a_sincronizar)

            """ print(repeticiones) """
        a_cerrar = pd.DataFrame()
        """ problematicos_final = problematicos_final.drop_duplicates() """
        now = datetime.now(pytz.timezone('America/Mexico_City'))
        if not a_sincronizar.empty:
            if not sync_zabbix.empty:
                a_cerrar_zabbix = sync_zabbix[~sync_zabbix['eventid'].isin(
                    a_sincronizar['eventid'].to_list())]
                if not a_cerrar_zabbix.empty:
                    statement = text(f"""
                UPDATE cassia_diagnostic_problems
                set closed_at=:date,
                status=:status
                where eventid in :ids
                """)
                    session.execute(statement, params={
                        'date': now, 'status': 'Cerrado', 'ids': a_cerrar['eventid'].to_list()})

            if not sync_local.empty:
                a_cerrar_local = sync_local[~sync_local['eventid'].isin(
                    a_sincronizar['eventid'].to_list())]
                if not a_cerrar_local.empty:
                    statement = text(f"""
                UPDATE cassia_diagnostic_problems
                set closed_at=:date,
                status=:status
                where eventid in :ids
                """)
                    session.execute(statement, params={
                        'date': now, 'status': 'Cerrado', 'ids': a_cerrar['eventid'].to_list()})

        session.commit()
        print("se cerraron")
        """ print(a_sincronizar.to_string()) """
        """ len1 = len(problematicos) """

        """ print(a_guardar.to_string())
        print(a_cerrar.to_string()) """

        """ len2 = len(problematicos)
        print(problematicos.to_string())
        print(f"len 1 {len1},   len 2 : {len2}")
         """
        """ len1 = len(dependencias)
        dependencias = dependencias.drop_duplicates()
        len2 = len(dependencias)
        print(dependencias.to_string())
        print(f"len 1 {len1},   len 2 : {len2}") """
        """ print(dependencias.to_string()) """
        """ print(repeticiones) """
    return


""" @diagnosta_schedule.task(("every 60 seconds & diagnosta"), execution="thread") """


async def close_problems():
    with DB_Zabbix().Session() as session:
        statement = text(
            f"call sp_viewProblem('','','','')")
        problems = pd.DataFrame(session.execute(statement))
        statement2 = text(f"""SELECT * FROM cassia_diagnostic""")
        sync = pd.DataFrame(session.execute(statement2))
        to_close = sync[~sync['eventid'].isin(problems['eventid'])]
        now = datetime.now(pytz.timezone("America/Mexico"))
        statement = f("""UPDATE cassia_diagnostic
        set closed_at = :date
        where eventid in :eventids""")
        update = session.execute(
            statement, {'date': now, 'eventids': to_close['eventids'].to_list()})
        session.commit()


async def process_layer(capa_name: str, response_capa, no_sync_zabbix: pd.DataFrame, no_sync_local: pd.DataFrame, a_sincronizar: pd.DataFrame, session, problemas_creados: pd.DataFrame):
    """ print(response_capa) """
    capa = response_capa[capa_name]
    if not "dispositivo_analizado" in capa and not "dispositivo_problematico" in capa:
        return a_sincronizar

    analizado = capa['dispositivo_analizado']
    problematico = capa['dispositivo_problematico']
    if not problematico:
        print("null")
        return a_sincronizar
    if len(analizado) and not len(problematico):
        analizado = analizado[0]
        incorporar_zabbix = no_sync_zabbix[no_sync_zabbix['hostid'].astype(
            int) == analizado[0]]
        """ incorporar_local = no_sync_zabbix[no_sync_local['hostid'].astype(int) == analizado[0]] """
        for fila in incorporar_zabbix.index:
            a_incorporar = [incorporar_zabbix['hostid'][fila],
                            None,
                            'Sincronizado',
                            None, 0]
            """ a_sincronizar.loc[len(a_sincronizar)]=a_incorporar[0] """
            """ problematicos.loc[len(problematicos)] = a_incorporar[0] """
            row_is_present = (a_sincronizar[['eventid', 'depends_eventid']] == [
                a_incorporar[0], a_incorporar[1]]).all(axis=1).any()
            if not row_is_present:
                a_sincronizar.loc[len(
                    a_sincronizar)+1] = a_incorporar
        if incorporar_zabbix.empty:
            incorporar_local = no_sync_local[no_sync_local['hostid'].astype(
                int) == analizado[0]]
            if incorporar_local.empty:

                a_sincronizar.loc[len(
                    a_sincronizar)+1] = [incorporar_zabbix['hostid'][fila],
                                         None,
                                         'Sincronizado',
                                         None, 1]
        print("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa")
    if len(analizado) and len(problematico):

        """ if capa_name == 'capa1':
            analizado = analizado[0]
            problematico = problematico[0]
        if capa_name == 'capa2':
            analizado = analizado[0]
            problematico = problematico """

        if analizado[0] == problematico[0]:
            filas_asociadas = no_sync_zabbix[no_sync_zabbix['hostid'].astype(int)
                                             == problematico[0]]

            if filas_asociadas.empty:
                print(f"Sin evento en host padre 1:{problematico[0]}")
                print(analizado)
                incorporar_local = no_sync_local[no_sync_local['hostid'].astype(
                    int) == analizado[0]]

                if incorporar_local.empty:
                    row_is_present = (
                        problemas_creados[['hostid']] == analizado[0]).all(axis=1).any()
                    if not row_is_present.empty:

                        host_padre = text(f"""
SELECT h.hostid ,h.host as hostname,hi.location_lat as latitude,hi.location_lon as longitude,
i.ip, cm.name as municipality,hi.device_id as tech_id  FROM hosts h 
INNER JOIN host_inventory hi  on h.hostid=hi.hostid 
inner join interface i on h.hostid =i.hostid
INNER JOIN hosts_groups hg on h.hostid= hg.hostid 
inner join cat_municipality cm on hg.groupid =cm.groupid 
where h.hostid={analizado[0]}
""")
                        host_padre = pd.DataFrame(session.execute(host_padre))
                        if not host_padre.empty:
                            problem_local = CassiaArchTrafficEvent2(
                                hostid=host_padre['hostid'][0],
                                severity=6,
                                message='Unavailable by ICMP ping',
                                status='PROBLEM',
                                latitude=host_padre['latitude'][0],
                                longitude=host_padre['longitude'][0],
                                municipality=host_padre['municipality'][0],
                                hostname=host_padre['hostname'][0],
                                ip=host_padre['ip'][0],
                                tech_id=host_padre['tech_id'][0])
                            session.add(problem_local)
                            session.commit()
                            """ session.refresh(problem_local) """
                            problemas_creados.loc[len(problemas_creados)] = [
                                problem_local.cassia_arch_traffic_events_id, problem_local.hostid]
                            print(
                                f"se creo el evento {problem_local.cassia_arch_traffic_events_id}")
                            a_sincronizar.loc[len(
                                a_sincronizar)+1] = [problem_local.cassia_arch_traffic_events_id,
                                                     None,
                                                     'Sincronizado',
                                                     None, 1]
                            """HASTA AQUI QUEDO, SE GUARDAN LOS HOST ORIGEN QUE NO TIENEN PROBLEMA Y SE LES CREA"""
            for fila in filas_asociadas.index:
                a_incorporar = [filas_asociadas['eventid'][fila],
                                None, 'Sincronizado', None, 0]
                """ problematicos.loc[len(problematicos)] = a_incorporar[0] """
                row_is_present = (a_sincronizar[['eventid', 'depends_eventid']] == [
                    a_incorporar[0], a_incorporar[1]]).all(axis=1).any()
                if not row_is_present:
                    a_sincronizar.loc[len(
                        a_sincronizar)+1] = a_incorporar
                """ print(type(no_sync['eventid']))
                print(type(a_incorporar[0])) """

                no_sync_zabbix.loc[no_sync_zabbix['eventid'].astype(int) ==
                                   a_incorporar[0], 'synced'] = 1
        else:
            if "desconectados_dependientes" in capa:
                response_dependientes = capa["desconectados_dependientes"]
                """ response_dependientes = dict(
                    response_json[1]) """

                dependientes = response_dependientes

                filas_asociadas = no_sync_zabbix[no_sync_zabbix['hostid'].astype(int)
                                                 == problematico[0]]
                """ print(problematico[0]) """
                """ print(filas_asociadas)
                                            print(type(no_sync['hostid'][0]))
                                            print(type(problematico[0])) """
                """ evento_problematico = 0 """
                if filas_asociadas.empty:
                    print(f"Sin evento en host padre 2:{problematico[0]}")
                    print(analizado)
                    print(capa)

                    incorporar_local = no_sync_local[no_sync_local['hostid'].astype(
                        int) == problematico[0]]

                    if incorporar_local.empty:
                        row_is_present = (
                            problemas_creados[['hostid']] == problematico[0]).all(axis=1).any()
                        if not row_is_present:
                            host_padre = text(f"""
SELECT h.hostid ,h.host as hostname,hi.location_lat as latitude,hi.location_lon as longitude,
i.ip, cm.name as municipality,hi.device_id as tech_id  FROM hosts h 
INNER JOIN host_inventory hi  on h.hostid=hi.hostid 
inner join interface i on h.hostid =i.hostid
INNER JOIN hosts_groups hg on h.hostid= hg.hostid 
inner join cat_municipality cm on hg.groupid =cm.groupid 
where h.hostid={problematico[0]}
""")
                            host_padre = pd.DataFrame(
                                session.execute(host_padre))
                            if not host_padre.empty:
                                problem_local = CassiaArchTrafficEvent2(
                                    hostid=host_padre['hostid'][0],
                                    severity=6,
                                    message='Unavailable by ICMP ping',
                                    status='PROBLEM',
                                    latitude=host_padre['latitude'][0],
                                    longitude=host_padre['longitude'][0],
                                    municipality=host_padre['municipality'][0],
                                    hostname=host_padre['hostname'][0],
                                    ip=host_padre['ip'][0],
                                    tech_id=host_padre['tech_id'][0])
                                session.add(problem_local)
                                session.commit()
                                print("aaaaaaaaaaaaaaa", problem_local)
                                """ session.refresh(problem_local) """
                                problemas_creados.loc[len(problemas_creados)+1] = [
                                    problem_local.cassia_arch_traffic_events_id, problem_local.hostid]
                                print(
                                    f"se creo el evento {problem_local.cassia_arch_traffic_events_id}")
                                a_sincronizar.loc[len(
                                    a_sincronizar)+1] = [problem_local.cassia_arch_traffic_events_id,
                                                         None,
                                                         'Sincronizado',
                                                         None, 1]
                            """HASTA AQUI QUEDO, SE GUARDAN LOS HOST ORIGEN QUE NO TIENEN PROBLEMA Y SE LES CREA"""
                for fila in filas_asociadas.index:
                    a_incorporar = [filas_asociadas['eventid'][fila],
                                    None, 'Sincronizado', None, 0]
                    """ problematicos.loc[len(problematicos)] = a_incorporar[0] """
                    row_is_present = (a_sincronizar[['eventid', 'depends_eventid']] == [
                        a_incorporar[0], a_incorporar[1]]).all(axis=1).any()
                    if not row_is_present:
                        a_sincronizar.loc[len(
                            a_sincronizar)+1] = a_incorporar
                    no_sync_zabbix.loc[no_sync_zabbix['eventid'] ==
                                       a_incorporar[0], 'synced'] = 1
                    """ evento_problematico = filas_asociadas['hostid'][fila] """
                    """ print("si entra aca") """
                for dependiente in dependientes:
                    filas_asociadas_dependientes = no_sync_zabbix[no_sync_zabbix['eventid']
                                                                  == dependiente[0]]
                    if filas_asociadas_dependientes.empty:
                        print(
                            f"Sin evento en host hijo 3:{dependiente[0]}")
                    for fila_dependiente in filas_asociadas_dependientes.index:
                        """ a_incorporar = [
                            filas_asociadas_dependientes['eventid'][fila_dependiente], evento_problematico, 'Sincronizado', None]
                        dependencias.loc[len(
                            dependencias)] = a_incorporar[0]
                        row_is_present = (a_sincronizar[['eventid', 'depends_eventid']] == [
                            a_incorporar[0], a_incorporar[1]]).all(axis=1).any()
                        if not row_is_present:
                            a_sincronizar.loc[len(
                                a_sincronizar)] = a_incorporar """
                        no_sync_zabbix.loc[no_sync_zabbix['eventid'] ==
                                           filas_asociadas_dependientes['eventid'][fila_dependiente], 'synced'] = 1
                """     print(
                                            type(no_sync['eventid']))
                                        print(
                                            type(a_incorporar[0])) """
    return a_sincronizar
